(replace_env.c)

void	*ft_realloc(void *ptr, size_t size)
{
	void	*new_ptr;
	size_t	old_size;
	if (!ptr)
		return (malloc(size));
	if (!size)
		return (free(ptr), NULL);
	old_size = ft_strlen(ptr) + 1;
	new_ptr = malloc(size);
	if (!new_ptr)
		return (free(ptr), NULL);
	ft_memcpy(new_ptr, ptr, old_size < size ? old_size : size);
	free(ptr);
	return (new_ptr);
}

static size_t	calc_new_len(char *str, t_env *env)
{
	size_t	len;
	if (!str || !env)
		return (0);
	len = ft_strlen(str);
	if (!env->value)
		return (len - ft_strlen(env->key) - 1);
	return (len - ft_strlen(env->key) - 1 + ft_strlen(env->value));
}
static char	*append_str(char *str, const char *append)
{
	char	*new_str;
	size_t	str_len;
	size_t	append_len;
	if (!append)
		return (str);
	str_len = str ? ft_strlen(str) : 0;
	append_len = ft_strlen(append);
	new_str = malloc(str_len + append_len + 1);
	if (!new_str)
		return (free(str), NULL);
	if (str)
		ft_strlcpy(new_str, str, str_len + 1);
	else
		new_str[0] = '\0';
	ft_strlcat(new_str, append, str_len + append_len + 1);
	free(str);
	return (new_str);
}


(token_management.c)
void	remove_head(t_token **token)
{
	while (*token && (*token)->txt[0] == '\0')
	{
		*token = (*token)->next;
		free_one_token(*token);
	}
}

void	cleanup_tokens(t_token **token)
{
	t_token	*temp;
	t_token	*current;
	t_token	*prev;

	prev = NULL;
	if (!token || !*token)
		return;
	remove_head(token);
	current = *token;
	while (current)
	{
		if (current->txt[0] == '\0')
		{
			temp = current;
			if (prev)
				prev->next = current->next;
			current = current->next;
			free_one_token(temp);
		}
		else
		{
			prev = current;
			current = current->next;
		}
	}
}

(args.c)
static size_t get_args_size(t_token *token, int limit[2])
{
	size_t  i = 0;
	t_token *current = token;
	int     j = 0;
	while (j < limit[0] && current)
	{
		current = current->next;
		j++;
	}
	while (current && j < limit[1])
	{
		if ((current->txt[0] == '>' || current->txt[0] == '<') 
			&& current->qtype == NO)
		{
			if (current->next)
			{
				current = current->next->next;
				j += 2;
			}
			continue;
		}
		if (ft_strcmp(current->txt, "") == 0)
		{
			current = current->next;
			j++;
			continue;
		}
		i++;
		current = current->next;
		j++;
	}
	return (i);
}

static char **fill_args(t_token *token, int limit[2], char **arrstr)
{
	t_token *current = token;
	int     i = 0;
	int     j = 0;

	while (j < limit[0] && current)
	{
		current = current->next;
		j++;
	}
	while (current && j < limit[1])
	{
		if ((current->txt[0] == '>' || current->txt[0] == '<') 
			&& current->qtype == NO)
		{
			if (current->next)
			{
				current = current->next->next;
				j += 2;
			}
			continue;
		}
		if (ft_strcmp(current->txt, "") == 0)
		{
			current = current->next;
			j++;
			continue;
		}
		arrstr[i++] = ft_strdup(current->txt);
		current = current->next;
		j++;
	}
	arrstr[i] = NULL;
	return (arrstr);
}

(tokens_to_arrstr.c)

static size_t	get_arrstrlen(t_token *token)
{
	size_t		i;
	t_token	*current;

	i = 0;
	current = token;
	while (current && ft_strcmp(current->txt, "") != 0)
	{
		i++;
		current = current->next;
	}
	return (i);
}

char	**tokens_to_arrstr(t_token *token)
{
	size_t	i;
	size_t	len;
	t_token	*current;
	char	**tokens;

	i = 0;
	len = get_arrstrlen(token);
	tokens = (char **)malloc((len + 1) * sizeof(char *));
	current = token;
	while (i < len)
	{
		if (ft_strcmp(current->txt, "") != 0)
		{
			tokens[i] = ft_strdup(current->txt);
			i++;
		}
		current = current->next;
	}
	tokens[i] = NULL;
	return (tokens);
}

void	free_arrstr(char **arr)
{
	size_t	i;

	if (!arr)
		return;
	i = 0;
	while (arr[i])
	{
		free(arr[i]);
		i++;
	}
	free(arr);
}
